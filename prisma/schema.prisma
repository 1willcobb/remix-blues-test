datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String               @id @default(uuid())
  username       String               @unique
  email          String               @unique
  isAdmin        Boolean              @default(false)
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  password       Password?
  posts          Post[]
  postCount      Int                  @default(0)
  comments       Comment[]
  likes          Like[]
  votes          Vote[]
  followers      UserFollow[]         @relation("followersRelation")
  followerCount  Int                  @default(0)
  following      UserFollow[]         @relation("followingRelation")
  followingCount Int                  @default(0)
  chats          Chat[]               @relation("ChatParticipants")
  messages       Message[]
  blogs          Blog[]               @relation("UserBlogs")
  tokens         PasswordResetToken[]
}

model Password {
  id     String @id @default(uuid())
  hash   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model PasswordResetToken {
  id         String   @id @default(uuid())
  token      String   @unique
  userId     String
  expiration DateTime
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id           String    @id @default(uuid())
  content      String
  imageUrl     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  comments     Comment[]
  commentCount Int       @default(0)
  likes        Like[]
  likeCount    Int       @default(0)
  votes        Vote[]
  voteCount    Int       @default(0)
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String?
  blog      Blog?    @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId    String?
}

model Vote {
  id        String   @id @default(uuid())
  value     Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
}

model UserFollow {
  id           String   @id @default(uuid())
  follower     User     @relation("followersRelation", fields: [followerId], references: [id], onDelete: Cascade)
  followerId   String
  followedUser User     @relation("followingRelation", fields: [followedId], references: [id], onDelete: Cascade)
  followedId   String
  createdAt    DateTime @default(now())
}

model Chat {
  id           String    @id @default(uuid())
  participants User[]    @relation("ChatParticipants")
  messages     Message[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Message {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId    String
}

model Blog {
  id           String    @id @default(uuid())
  title        String
  content      String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  author       User      @relation("UserBlogs", fields: [authorId], references: [id], onDelete: Cascade)
  authorId     String
  likes        Like[]
  likeCount    Int       @default(0)
  comments     Comment[]
  commentCount Int       @default(0)
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String?
  likes     Like[]
  likeCount Int      @default(0)
  blog      Blog?    @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId    String?
}
