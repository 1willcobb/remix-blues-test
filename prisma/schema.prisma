generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String               @id @default(uuid())
  email          String               @unique
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  isAdmin        Boolean              @default(false)
  username       String               @unique
  followerCount  Int                  @default(0)
  followingCount Int                  @default(0)
  postCount      Int                  @default(0)
  profileImage   String?              @default("https://d3hspsrf978pst.cloudfront.net/default-avatar-profile-icon-vector-social-media-user-portrait-176256935.webp")
  displayName    String?
  role           Role                 @default(FRIEND)
  userBio        String?
  betaAccess     Boolean              @default(false)
  link           String?
  linkAltName    String?
  status         Status               @default(ACTIVE)
  blogs          Blog[]               @relation("UserBlogs")
  comments       Comment[]
  flags          Flag[]
  likes          Like[]
  messages       Message[]
  password       Password?
  tokens         PasswordResetToken[]
  posts          Post[]
  following      UserFollow[]         @relation("followingRelation")
  followers      UserFollow[]         @relation("followersRelation")
  votes          Vote[]
  chats          Chat[]               @relation("ChatParticipants")
  notifications  Notification[]
}

model Password {
  hash   String
  userId String @unique
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id         String   @id @default(uuid())
  token      String   @unique
  userId     String
  expiration DateTime
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id           String    @id @default(uuid())
  content      String?
  imageUrl     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  userId       String
  likeCount    Int       @default(0)
  commentCount Int       @default(0)
  voteCount    Int       @default(0)
  camera       String?
  filmStock    String?
  lens         String?
  location     String?
  settings     String?
  comments     Comment[]
  flags        Flag[]
  likes        Like[]
  user         User      @relation(fields: [userId], references: [id])
  votes        Vote[]
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  userId    String
  postId    String?
  commentId String?
  blogId    String?
  blog      Blog?    @relation(fields: [blogId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Vote {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  userId    String
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserFollow {
  id           String   @id @default(uuid())
  followerId   String
  followedId   String
  createdAt    DateTime @default(now())
  followedUser User     @relation("followingRelation", fields: [followedId], references: [id], onDelete: Cascade)
  follower     User     @relation("followersRelation", fields: [followerId], references: [id], onDelete: Cascade)
}

model Chat {
  id           String    @id @default(uuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  messages     Message[]
  participants User[]    @relation("ChatParticipants")
}

model Message {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  userId    String
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Blog {
  id           String    @id @default(uuid())
  title        String
  subtitle     String?
  content      String
  titleImage   String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  authorId     String
  commentCount Int       @default(0)
  likeCount    Int       @default(0)
  author       User      @relation("UserBlogs", fields: [authorId], references: [id], onDelete: Cascade)
  comments     Comment[]
  flags        Flag[]
  likes        Like[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  userId    String
  postId    String?
  blogId    String?
  likeCount Int      @default(0)
  blog      Blog?    @relation(fields: [blogId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  flags     Flag[]
  likes     Like[]
}

model Flag {
  id        String   @id @default(uuid())
  content   String?
  createdAt DateTime @default(now())
  userId    String
  commentId String?
  postId    String?
  blogId    String?
  blog      Blog?    @relation(fields: [blogId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  content   String
  createdAt DateTime @default(now())
  isRead    Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  FRIEND
  GUEST
  MODERATOR
  SUPERADMIN
}

enum Status {
  ACTIVE
  INACTIVE
}
